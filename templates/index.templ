package templates

import (
    "time"
	"github.com/pocketbase/pocketbase/models"
)

templ root(title string) {
    <!DOCTYPE html>
    <html lang="en">
    @head(title)
    <body class="bg-gray-100 text-sm">
      { children... }
    </body>
    </html>
}

templ scripts() {
    <script src="//unpkg.com/htmx.org@2.0.2/dist/htmx.js" integrity="sha384-yZq+5izaUBKcRgFbxgkRYwpHhHHCpp5nseXp0MEQ1A4MTWVMnqkmcuFez8x5qfxr" crossorigin="anonymous" defer></script>
    <script src="/js/app.mjs" type="module"></script>
    <script src="//unpkg.com/alpinejs" defer></script>
    <script src="//cdn.tailwindcss.com"></script>
    <script>
      tailwind.config = {
        theme: {
          container: {
            center: true,
            padding: '2rem',
            screens: {
                sm: '640px',
                md: '768px',
                lg: '1024px',
            }
          }
        }
      }
    </script>
    <script>
        function copyTextToClipboard(text) {
            const input = document.createElement("input");
            input.value = text;
            document.body.appendChild(input);
            input.select();
            document.execCommand("copy");
            document.body.removeChild(input);
        }

        function getSharableUrl() {
            const url = new URL(document.URL)
            url.search = ''
            return url.toString()
        }

        function copySharableUrl() {
            copyTextToClipboard(getSharableUrl())
        }
    </script>
}

templ head(title string) {
    <head>
        <meta charset="UTF-8">
        <meta name="viewport"
              content="width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0">
        <meta http-equiv="X-UA-Compatible" content="ie=edge">
        <title>{title} - Feedback</title>

        @scripts()
    </head>
}

templ Index () {
    @root("Create Space") {
        <div class="container mx-auto p-4">
            <h1 class="text-2xl font-bold">Feedback</h1>
            <form action="/feedback" method="post" class="mt-4">
                <div class="mb-4">
                    <label for="title" class="block text-gray-700 text-sm font-bold mb-2">Title</label>
                    <input type="text" name="title" id="title" class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline">
                </div>
                <div class="mb-4">
                    <label for="valid_until" class="block text-gray-700 text-sm font-bold mb-2">Valid until</label>
                    <input type="datetime-local" name="valid_until" id="valid_until" value={ time.Now().AddDate(0, 1, 0 ).Format(time.DateTime) } class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline">
                </div>
                <button type="submit" class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline">Submit</button>
            </form>
        </div>  
    }
}

templ Feedback (space *models.Record, questions []*models.Record, choicesByQuestion, answersByQuestion map[string][]*models.Record, password string) {
    @root(space.GetString("title")) {
        <div class="container mx-auto p-4">
            <h1 class="text-2xl font-bold">{space.GetString("title")}</h1>
            <div x-data>
                <h6 class="text-base text-gray-800">Share me</h6>
                <div class="w-full rounded-lg overflow-hidden border border-gray-300 flex items-center mt-4" x-on:click="copySharableUrl()">
                    <div class="text-sm text-gray-500 flex-1 ml-4" x-text="getSharableUrl()">
                    </div>
                    <button class="bg-blue-600 hover:bg-blue-700 px-6 py-3 text-sm text-white">Copy</button>
                </div>
            </div>

            if len(password) > 0 {
                @Form(space, password)
            }

            @templ.JSONScript("questions", questions)
            @templ.JSONScript("choicesByQuestion", choicesByQuestion)
            @templ.JSONScript("answersByQuestion", answersByQuestion)
            @templ.JSONScript("space", map[string]any{"id": space.Id})

            <script>
                document.addEventListener("alpine:init", function(event) {
                    Alpine.store('space', {
                        questions: JSON.parse(document.getElementById('questions').textContent),
                        choicesByQuestion: JSON.parse(document.getElementById('choicesByQuestion').textContent),
                        answersByQuestion: JSON.parse(document.getElementById('answersByQuestion').textContent),
                    })
                })
            </script>

            <div class="mt-4">
                <ul x-data class="space-y-2">
                    <template x-for="question in $store.space.questions" :key="question.id">
                        <li class="shadow rounded p-2 bg-white">
                            <form
                                method="post"
                                action={templ.URL("/s/" + space.GetString("slug") + "/answer")}
                                class="mb-4"
                                hx-boost="true"
                                hx-swap="outerHTML"
                                hx-target="this"
                                hx-push-url="false"
                            >
                                <div x-text="question.text"></div>
                                <div class="mt-4" >
                                    <input type="hidden" name="question_id" :value="question.id" />
                                    <template x-if="question.type === 'textarea'">
                                        <div>
                                            <textarea
                                                name="text[]"
                                                class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
                                                ></textarea>

                                            <button class="mt-2 bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline">
                                                Submit
                                            </button>
                                        </div>
                                    </template>
                                    <template x-if="question.type !== 'textarea'">
                                        <div>
                                            <template x-for="choice in $store.space.choicesByQuestion[question.id] ?? []" :key="choice.id">
                                                <div class="bg-gray-200 py-1">
                                                    <input :type="question.type === 'multiple' ? 'checkbox' : 'radio'" name="text[]" :value="choice.text" :id="question.id + '_' + choice.id"  />
                                                    <label :for="question.id + '_' + choice.id" x-text="choice.text"></label><br>
                                                </div>
                                            </template>
                                            <button class="mt-2 bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline">
                                                Submit
                                            </button>
                                        </div>
                                    </template>
                                </div>
                            </form>
                            <template x-if="$store.space.answersByQuestion[question.id] !== undefined">
                                <div>
                                    <h3 x-text="$store.space.answersByQuestion[question.id].length + ' Replies'" class="text-md font-semibold"></h3>
                                    <div class="mt-2 space-y-2">
                                        <template x-for="answer in $store.space.answersByQuestion[question.id] ?? []" :key="answer.id">
                                            <div>
                                                <div x-text="answer.text" class="py-1" > </div>
                                                <div x-text="answer.created" class="text-gray-500 text-xs"></div>
                                            </div>
                                        </template>
                                    </div>
                                </div>
                            </template>
                        </li>
                    </template>
                </ul>
            </div>
        </div>
    }
}

templ Form (space *models.Record, password string) {
    <form
         method="post"
         action={templ.URL("/s/" + space.GetString("slug") + "/question")}
         hx-boost="true"
         hx-target="this"
         hx-swap="outerHTML"
         hx-push-url="false"
         x-data="{ selectedType: 'textarea', choices: ['', '', ''] }">
        <input type="hidden" name="space_id" value={space.GetString("id")} />
        <input type="hidden" name="password" value={password} />
        <div class="mt-4">
            <label for="text" class="block text-gray-700 text-sm font-bold mb-2">Question</label>
            <input type="text" name="text" id="text" class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline">
        </div>
        <div class="mt-4">
            <label for="allow_multiple" class="block text-gray-700 text-sm font-bold mb-2">Allow users to add multiple replies to a question</label>
            <input type="checkbox" name="allow_multiple" id="allow_multiple" />
        </div>
        <div class="mt-4">
            <label for="reply_mode" class="block text-gray-700 text-sm font-bold mb-2">Show replies...</label>
            <select name="reply_mode" id="reply_mode" class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline">
                <option value="never">Never (only to admins)</option>
                <option value="after_answer">When the user has submitted an answer</option>
                <option value="always">Always</option>
            </select>
        </div>
        <div class="mt-4">
            <label for="type" class="block text-gray-700 text-sm font-bold mb-2">Type</label>

            <div x-data="{ types: [
                { value: 'textarea', label: 'Textarea' },
                { value: 'single', label: 'Multiple choice (single)' },
                { value: 'multiple', label: 'Multiple choice (multi)' }
            ] }">
                <input type="hidden" name="type" x-model="selectedType" />
                <template x-for="type in types">
                    <button
                        class="bg-white border shadow-sm px-4 py-2 rounded"
                        :class="{'bg-yellow-500': type.value === selectedType }"
                        @click.prevent="selectedType = type.value"
                        x-text="type.label"
                    >
                    </button>
                </template>
            </div>
        </div>

        <template x-if="selectedType !== 'textarea'">
            <template x-for="(choice, index) in choices">
                <div class="mt-4">
                    <label :for="`choice_${index}`" class="block text-gray-700 text-sm font-bold mb-2" x-text="`Choice ${index + 1}`"></label>
                    <input type="text" name="choices[]" :id="`choice_${index}`" class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline">
                </div>
            </template>
        </template>

        <template x-if="selectedType !== 'textarea'">
            <div class="mt-4">
                <button type="button" @click.prevent="choices.push('')" class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline">Add Choice</button>
            </div>
        </template>

        <div class="mt-2">
            <button type="submit" class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline">Add Question</button>
        </div>
    </form>
}

func inputType(question *models.Record) string {
    if question.GetString("type") == "multiple" {
        return "checkbox"
    }
    return "radio"
}

